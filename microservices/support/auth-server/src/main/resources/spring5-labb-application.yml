server:
  port: 9999
  contextPath: /uaa
  ssl:
    key-store: classpath:server.jks
    key-store-password: password
    key-password: password

security.user.password: password

security.oauth2.client:
  clientId: acme
  clientSecret: acmesecret
  authorized-grant-types: authorization_code,refresh_token,implicit,password,client_credentials
  scope: webshop

logging.level:
  root: WARN

  se.callista: INFO

  org.springframework.security.oauth2: DEBUG
  org.springframework.security.oauth2.config.annotation.web.configurers.FrameworkEndpointHandlerMapping: INFO
  org.springframework.security.oauth2.provider.client.ClientCredentialsTokenGranter: DEBUG
  org.springframework.security.oauth2.provider.password.ResourceOwnerPasswordTokenGranter: DEBUG
  org.springframework.security.oauth2.provider.code.AuthorizationCodeTokenGranter: DEBUG
  org.springframework.security.oauth2.provider.implicit.ImplicitTokenGranter: DEBUG
  org.springframework.security.oauth2.provider.approval.ApprovalStoreUserApprovalHandler: DEBUG
  org.springframework.security.oauth2.provider.endpoint.TokenEndpoint: INFO
  org.springframework.security.oauth2.provider.approval.AuthorizationEndpoint: INFO

  # Set INFO to see the allocated port
  org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer: INFO
  org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer: INFO

  # Set DEBUG level to activate our log-filter to log each request and response
  org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG

  # FIXME: Get rid on NPE-exceptions in SC 1.1
  com.netflix.hystrix.contrib.javanica.command.GenericCommand: ERROR

  # Get info on failed OAuth access token validations
  org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices: INFO

  # Get info regarding connection to the cofig server and retries if required
  org.springframework.cloud.config.client.ConfigServicePropertySourceLocator: INFO
  org.springframework.retry.support.RetryTemplate: DEBUG

  # Set INFO to see the allocated port
  org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer: INFO
  org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer: INFO

  # Set DEBUG level on Hystrix to get an error message when a fallback method is used.
  com.netflix.hystrix: DEBUG
  com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty: WARN

  # To get rid of fake WARN messages: "Deprecated trace headers detected. Please upgrade Sleuth to 1.1 or start sending headers present in the TraceMessageHeaders class",
  org.springframework.cloud.sleuth.instrument.messaging.MessagingSpanExtractor: ERROR

  # Good low level HTTP log settings when required...
  # Note that the HTTP request/response logging will bloat the log due continous to polls to Eureka...
  org.apache.http.wire: INFO
  org.apache.http.impl.conn: DEBUG
  org.apache.http.impl.client: DEBUG
  org.apache.http.client: DEBUG
  org.apache.http: DEBUG

# 1.0 means 100%, see http://cloud.spring.io/spring-cloud-sleuth/spring-cloud-sleuth.html#_sampling
spring.sleuth.sampler.percentage: 1.0

spring.rabbitmq:
  host: localhost
  port: 5672

hystrix:
  threadpool:
    default:
      # Maximum number of concurrent requests when using thread pools (Default: 10)
      coreSize: 100
      # Maximum LinkedBlockingQueue size - -1 for using SynchronousQueue (Default: -1)
      maxQueueSize: -1
      # Queue size rejection threshold (Default: 5)
      queueSizeRejectionThreshold: 5
  command:
    default:
      circuitBreaker:
        sleepWindowInMilliseconds: 30000
        requestVolumeThreshold: 3
      execution:
        isolation:
#          strategy: SEMAPHORE, no thread pool but timeout handling stops to work
          strategy: THREAD
          thread:
            timeoutInMilliseconds: 4000



ribbon:

# FelFelFel: 1000
# capital or not capital, that is the question...

  # Interval to refresh the server list from the source
  serverListRefreshInterval: 1000

  # Max number of retries on the same server (excluding the first try)
  maxAutoRetries: 1

  # Max number of next servers to retry (excluding the first server)
  maxAutoRetriesNextServer: 1

  # Interval to refresh the server list from the source
  ServerListRefreshInterval: 1000

  # Max number of retries on the same server (excluding the first try)
  MaxAutoRetries: 1

  # Max number of next servers to retry (excluding the first server)
  MaxAutoRetriesNextServer: 1

#
#  # Connect timeout used by Apache HttpClient
#  connectTimeout: 100
#
#  # Read timeout used by Apache HttpClient
#  readTimeout: 10000
#
#  ConnectTimeout: 100
#  ReadTimeout: 3000

eureka:
  instance:
    leaseRenewalIntervalInSeconds: 1
    leaseExpirationDurationInSeconds: 1
    metadataMap:
      instanceId: ${vcap.application.instance_id:${spring.application.name}:${spring.application.instance_id:${random.value}}}
  client:
    # Default values comes from org.springframework.cloud.netflix.eurek.EurekaClientConfigBean
    registryFetchIntervalSeconds: 1
    instanceInfoReplicationIntervalSeconds: 1
    initialInstanceInfoReplicationIntervalSeconds: 1
